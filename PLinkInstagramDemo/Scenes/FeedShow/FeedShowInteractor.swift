//
//  FeedShowInteractor.swift
//  PLinkInstagramDemo
//
//  Created by msm72 on 05.09.17.
//  Copyright (c) 2017 RemoteJob. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol FeedShowBusinessLogic {
    func loadFeed(withRequestModel requestModel: FeedShowModels.Feed.RequestModel)
}

protocol FeedShowDataStore {
    var feed: Feed! { get set }
}

class FeedShowInteractor: FeedShowBusinessLogic, FeedShowDataStore {
    // MARK: - Properties
    var presenter: FeedShowPresentationLogic?
    var worker: FeedShowWorker?
    
    var feed: Feed!
    
    
    // MARK: - Business logic implementation
    func loadFeed(withRequestModel requestModel: FeedShowModels.Feed.RequestModel) {
        worker = FeedShowWorker()
        worker?.doSomeWork()
        
        guard Connectivity.isConnectedToInternet() else {
            let lastCommentModel = FMDBManager.shared.commentLoad(byMediaID: feed.codeID)
            next(withText: lastCommentModel?.text)
            return
        }

        // Get Comments model
        RestAPIManager.shared.requestDidRun(.loadLastCommentByMediaID([fieldAccessToken: user!.accessToken], feed.codeID)) { (responseAPI) in
            if let dataList = responseAPI?.data as? [[String: Any]], dataList.count > 0 {
                // Create new Comments object
                for commentSONs in dataList {
                    // Filter & create new json
                    var json = [String: Any]()
                    
                    for dictionary in commentSONs {
                        if commentFieldsSet.contains(dictionary.key) {
                            json[dictionary.key] = dictionary.value
                        }
                    }

                    do {
                        let lastCommentModel = try Comment(json: json, mediaID: self.feed.codeID)
                        _ = FMDBManager.shared.commentLoad(lastCommentModel)
                        self.next(withText: lastCommentModel.text)
                    } catch {
                        print(error.localizedDescription)
                    }
                }
            } else {
                self.next(withText: nil)
            }
        }
    }

    func next(withText text: String?) {
        let responseModel = FeedShowModels.Feed.ResponseModel(feedDisplayed: (self.feed, text))
        self.presenter?.prepareToDisplayFeedComment(fromResponseModel: responseModel)
    }
}
