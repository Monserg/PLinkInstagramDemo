//
//  FeedsShowInteractor.swift
//  PLinkInstagramDemo
//
//  Created by msm72 on 01.09.17.
//  Copyright (c) 2017 RemoteJob. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Business Logic protocols
protocol FeedsShowBusinessLogic {
    func feedsLoad(withRequestModel requestModel: FeedsShowModels.Feeds.RequestModel)
}

protocol FeedsShowDataStore {
    var feeds: [Feed]! { get set }
    var feedSelected: Feed! { get set }
}

class FeedsShowInteractor: FeedsShowBusinessLogic, FeedsShowDataStore {
    // MARK: - Properties
    var presenter: FeedsShowPresentationLogic?
    var worker: FeedsShowWorker?
    
    // Confirm FeedsShowDataStore protocol
    var feeds: [Feed]!
    var feedSelected: Feed!
    
    
    // MARK: - Business logic implementation
    func feedsLoad(withRequestModel requestModel: FeedsShowModels.Feeds.RequestModel) {
        worker = FeedsShowWorker()
        worker?.doSomeWork()
        
        feeds = [Feed]()
        
        RestAPIManager.shared.requestDidRun(.loadFeedsByAccessToken(requestModel.parameters)) { (responseAPI) in
            if let feedsList = responseAPI?.data as? [[String: Any]], feedsList.count > 0 {
                // Pagination
                if let pagination = responseAPI?.pagination {
                    _ = FMDBManager.shared.paginationLoad(pagination)
                }
                
                // Feeds
                for feedJSONs in feedsList {
                    // Filter & create new json
                    var json = [String: Any]()
                    
                    for dictionary in feedJSONs {
                        if feedFieldsSet.contains(dictionary.key) {
                            json[dictionary.key] = dictionary.value
                        }
                    }
                    
                    do {
                        let feed = try Feed(json: json, withAccessToken: user!.accessToken)
                        _ = FMDBManager.shared.feedLoad(feed)
                            self.feeds.append(feed)
                    } catch {
                        print(error.localizedDescription)
                    }
                }
                
                let responseModel = FeedsShowModels.Feeds.ResponseModel(feeds: self.feeds)
                self.presenter?.prepareFeedsToDisplay(fromResponseModel: responseModel)
            }
        }
    }
}
